// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User and Authentication Models
model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             UserRole          @default(STAFF)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  createdSales     Sale[]            @relation("SaleCreatedBy")
  processedReturns Return[]
  inspectedQCs     QualityControl[]
  warehouseStaff   WarehouseStaff?
  storeStaff       StoreStaff?
  createdAudits    Audit[]           @relation("AuditCreatedBy")
  auditAssignments AuditAssignment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  WAREHOUSE_MANAGER
  WAREHOUSE_STAFF
  STORE_MANAGER
  STORE_STAFF
}

// Warehouse Management
model Warehouse {
  id              String           @id @default(cuid())
  name            String
  code            String           @unique
  address         String?
  contactPerson   String?
  phone           String?
  email           String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  zones           WarehouseZone[]
  inventoryItems  InventoryItem[]
  staff           WarehouseStaff[]
  transfersFrom   Transfer[]       @relation("TransferFromWarehouse")
  transfersTo     Transfer[]       @relation("TransferToWarehouse")
  purchaseOrders  PurchaseOrder[]
  qualityControls QualityControl[]
  audits          Audit[]
}

model WarehouseZone {
  id          String           @id @default(cuid())
  name        String
  code        String
  warehouseId String
  warehouse   Warehouse        @relation(fields: [warehouseId], references: [id])
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  aisles      WarehouseAisle[]

  @@unique([warehouseId, code])
}

model WarehouseAisle {
  id        String           @id @default(cuid())
  name      String
  code      String
  zoneId    String
  zone      WarehouseZone    @relation(fields: [zoneId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  shelves   WarehouseShelf[]

  @@unique([zoneId, code])
}

model WarehouseShelf {
  id        String         @id @default(cuid())
  name      String
  code      String
  aisleId   String
  aisle     WarehouseAisle @relation(fields: [aisleId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  bins      WarehouseBin[]

  @@unique([aisleId, code])
}

model WarehouseBin {
  id             String          @id @default(cuid())
  name           String
  code           String
  shelfId        String
  shelf          WarehouseShelf  @relation(fields: [shelfId], references: [id])
  capacity       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  inventoryItems InventoryItem[]

  @@unique([shelfId, code])
}

model WarehouseStaff {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  position    String?
  isManager   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Store Management
model Store {
  id             String          @id @default(cuid())
  name           String
  code           String          @unique
  address        String?
  phone          String?
  email          String?
  openingHours   String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  inventoryItems InventoryItem[]
  sales          Sale[]
  returns        Return[]
  staff          StoreStaff[]
  transfersFrom  Transfer[]      @relation("TransferFromStore")
  transfersTo    Transfer[]      @relation("TransferToStore")
}

model StoreStaff {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  position  String?
  isManager Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Supplier Management
model Supplier {
  id                 String                      @id @default(cuid())
  name               String
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  postalCode         String?
  country            String?
  taxId              String?
  paymentTerms       String?
  notes              String?
  rating             Int? // Supplier rating (1-5)
  isActive           Boolean                     @default(true)
  createdById        String?
  updatedById        String?
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  products           Product[]
  contracts          SupplierContract[]
  purchaseOrders     PurchaseOrder[]
  performanceMetrics SupplierPerformanceMetric[]
}

model SupplierContract {
  id             String         @id @default(cuid())
  supplierId     String
  supplier       Supplier       @relation(fields: [supplierId], references: [id])
  contractNumber String
  title          String
  description    String?
  startDate      DateTime
  endDate        DateTime?
  renewalDate    DateTime?
  value          Float?
  terms          String? // Contract terms
  paymentTerms   String? // Payment terms
  status         ContractStatus @default(ACTIVE)
  documentUrl    String? // URL to contract document
  createdById    String?
  updatedById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model SupplierPerformanceMetric {
  id          String                @id @default(cuid())
  supplierId  String
  supplier    Supplier              @relation(fields: [supplierId], references: [id])
  metricType  PerformanceMetricType
  date        DateTime
  value       Float // Metric value (e.g., 95 for 95% on-time delivery)
  notes       String?
  createdById String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model PurchaseOrder {
  id                   String              @id @default(cuid())
  orderNumber          String              @unique
  supplierId           String
  supplier             Supplier            @relation(fields: [supplierId], references: [id])
  warehouseId          String
  warehouse            Warehouse           @relation(fields: [warehouseId], references: [id])
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  status               PurchaseOrderStatus @default(DRAFT)
  subtotal             Float               @default(0)
  taxAmount            Float               @default(0)
  totalAmount          Float               @default(0)
  notes                String?
  createdById          String?
  approvedById         String?
  receivedById         String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  items                PurchaseOrderItem[]
  qualityControls      QualityControl[]
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId        String
  product          Product       @relation(fields: [productId], references: [id])
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int           @default(0)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWAL_PENDING
}

enum PerformanceMetricType {
  ON_TIME_DELIVERY
  QUALITY
  PRICE_COMPETITIVENESS
  RESPONSIVENESS
  LEAD_TIME
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  DAMAGED
  EXPIRED
  IN_TRANSIT
  QUARANTINE
  RETURNED
}

enum InventoryMethod {
  FIFO
  LIFO
  FEFO // First Expired, First Out
  AVERAGE_COST
}

// Product Management
model Product {
  id                  String               @id @default(cuid())
  sku                 String               @unique
  barcode             String?
  name                String
  description         String?
  unit                String               @default("each")
  categoryId          String?
  category            Category?            @relation(fields: [categoryId], references: [id])
  supplierId          String?
  supplier            Supplier?            @relation(fields: [supplierId], references: [id])
  costPrice           Float                @default(0)
  wholesalePrice      Float                @default(0)
  retailPrice         Float                @default(0)
  minStockLevel       Int                  @default(0)
  reorderPoint        Int                  @default(0)
  leadTime            Int? // Lead time in days
  condition           ProductCondition     @default(NEW)
  createdById         String?
  updatedById         String?
  isActive            Boolean              @default(true)
  purchaseOrderItems  PurchaseOrderItem[]
  qualityControlItems QualityControlItem[]
  returnItems         ReturnItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  inventoryItems      InventoryItem[]
  saleItems           SaleItem[]
  transferItems       TransferItem[]
  auditItems          AuditItem[]
}

model Category {
  id          String              @id @default(cuid())
  name        String
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    Product[]
  priceRules  CategoryPriceRule[]
}

model CategoryPriceRule {
  id              String   @id @default(cuid())
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  adjustmentType  String // "percentage", "fixed", "margin"
  adjustmentValue Float
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Inventory Management
model InventoryItem {
  id                String           @id @default(cuid())
  productId         String
  product           Product          @relation(fields: [productId], references: [id])
  storeId           String?
  store             Store?           @relation(fields: [storeId], references: [id])
  warehouseId       String?
  warehouse         Warehouse?       @relation(fields: [warehouseId], references: [id])
  binId             String?
  bin               WarehouseBin?    @relation(fields: [binId], references: [id])
  batchNumber       String?
  lotNumber         String?
  serialNumber      String?
  expiryDate        DateTime?
  manufacturingDate DateTime?
  quantity          Int              @default(0)
  reservedQuantity  Int              @default(0)
  costPrice         Float            @default(0)
  retailPrice       Float            @default(0)
  status            InventoryStatus  @default(AVAILABLE)
  condition         ProductCondition @default(NEW)
  inventoryMethod   InventoryMethod? // FIFO, LIFO, etc.
  receivedDate      DateTime         @default(now()) // Used for FIFO/LIFO calculations
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  saleItems         SaleItem[]
  auditItems        AuditItem[]

  @@unique([productId, storeId])
  @@unique([productId, warehouseId, binId])
}

// Sales Management
model Sale {
  id             String        @id @default(cuid())
  receiptNumber  String        @unique
  storeId        String
  store          Store         @relation(fields: [storeId], references: [id])
  customerId     String?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  createdById    String
  createdBy      User          @relation("SaleCreatedBy", fields: [createdById], references: [id])
  saleDate       DateTime      @default(now())
  subtotal       Float
  taxAmount      Float
  discountAmount Float         @default(0)
  totalAmount    Float
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PAID)
  notes          String?
  items          SaleItem[]
  payments       Payment[]
  returns        Return[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model SaleItem {
  id              String        @id @default(cuid())
  saleId          String
  sale            Sale          @relation(fields: [saleId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  quantity        Int
  unitPrice       Float
  discountAmount  Float         @default(0)
  taxAmount       Float         @default(0)
  totalPrice      Float
  returnItems     ReturnItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Payment {
  id              String        @id @default(cuid())
  saleId          String
  sale            Sale          @relation(fields: [saleId], references: [id])
  amount          Float
  paymentMethod   PaymentMethod
  referenceNumber String?
  notes           String?
  processedById   String
  processedByName String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

// Returns Management
model Return {
  id              String           @id @default(cuid())
  returnNumber    String           @unique
  saleId          String?
  sale            Sale?            @relation(fields: [saleId], references: [id])
  storeId         String
  store           Store            @relation(fields: [storeId], references: [id])
  customerId      String?
  customer        Customer?        @relation(fields: [customerId], references: [id])
  returnDate      DateTime         @default(now())
  status          ReturnStatus     @default(PENDING)
  subtotal        Float
  taxAmount       Float
  totalAmount     Float
  refundMethod    RefundMethod?
  refundStatus    RefundStatus     @default(PENDING)
  reason          String?
  notes           String?
  processedById   String
  processedBy     User             @relation(fields: [processedById], references: [id])
  items           ReturnItem[]
  qualityControls QualityControl[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ReturnItem {
  id         String        @id @default(cuid())
  returnId   String
  return     Return        @relation(fields: [returnId], references: [id])
  productId  String
  product    Product       @relation(fields: [productId], references: [id])
  saleItemId String?
  saleItem   SaleItem?     @relation(fields: [saleItemId], references: [id])
  quantity   Int
  unitPrice  Float
  totalPrice Float
  reason     ReturnReason
  condition  ItemCondition @default(GOOD)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum RefundMethod {
  ORIGINAL_PAYMENT
  STORE_CREDIT
  CASH
  BANK_TRANSFER
}

enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

enum ReturnReason {
  DEFECTIVE
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  CHANGED_MIND
  OTHER
}

enum ItemCondition {
  GOOD
  DAMAGED
  OPENED
  USED
}

// Quality Control Management
model QualityControl {
  id              String               @id @default(cuid())
  referenceNumber String               @unique
  type            QCType
  status          QCStatus             @default(PENDING)
  warehouseId     String
  warehouse       Warehouse            @relation(fields: [warehouseId], references: [id])
  purchaseOrderId String?
  purchaseOrder   PurchaseOrder?       @relation(fields: [purchaseOrderId], references: [id])
  returnId        String?
  return          Return?              @relation(fields: [returnId], references: [id])
  inspectionDate  DateTime             @default(now())
  completedDate   DateTime?
  inspectedById   String
  inspectedBy     User                 @relation(fields: [inspectedById], references: [id])
  notes           String?
  items           QualityControlItem[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model QualityControlItem {
  id               String         @id @default(cuid())
  qualityControlId String
  qualityControl   QualityControl @relation(fields: [qualityControlId], references: [id])
  productId        String
  product          Product        @relation(fields: [productId], references: [id])
  quantity         Int
  passedQuantity   Int            @default(0)
  failedQuantity   Int            @default(0)
  pendingQuantity  Int            @default(0)
  status           QCItemStatus   @default(PENDING)
  reason           String?
  action           QCAction?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum QCType {
  RECEIVING
  RETURN
  RANDOM
  COMPLAINT
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QCItemStatus {
  PENDING
  PASSED
  FAILED
  PARTIALLY_PASSED
}

enum QCAction {
  ACCEPT
  REJECT
  REWORK
  RETURN_TO_SUPPLIER
  DISPOSE
}

// Transfer Management
model Transfer {
  id                   String             @id @default(cuid())
  transferNumber       String             @unique
  fromWarehouseId      String?
  fromWarehouse        Warehouse?         @relation("TransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  fromStoreId          String?
  fromStore            Store?             @relation("TransferFromStore", fields: [fromStoreId], references: [id])
  toWarehouseId        String?
  toWarehouse          Warehouse?         @relation("TransferToWarehouse", fields: [toWarehouseId], references: [id])
  toStoreId            String?
  toStore              Store?             @relation("TransferToStore", fields: [toStoreId], references: [id])
  status               TransferStatus     @default(DRAFT)
  transferType         TransferType // Type of transfer (e.g., RESTOCK, RETURN, etc.)
  priority             TransferPriority   @default(NORMAL)
  requestedById        String?
  approvedById         String?
  rejectedById         String?
  completedById        String?
  requestedDate        DateTime?
  approvedDate         DateTime?
  rejectedDate         DateTime?
  completedDate        DateTime?
  expectedDeliveryDate DateTime?
  actualDeliveryDate   DateTime?
  shippingMethod       String?
  trackingNumber       String?
  totalItems           Int                @default(0)
  totalCost            Float              @default(0)
  totalRetail          Float              @default(0)
  rejectionReason      String?
  notes                String?
  items                TransferItem[]
  documents            TransferDocument[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model TransferDocument {
  id          String   @id @default(cuid())
  transferId  String
  transfer    Transfer @relation(fields: [transferId], references: [id])
  name        String
  type        String // e.g., "INVOICE", "PACKING_SLIP", "RECEIPT", etc.
  url         String
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TransferType {
  RESTOCK // Warehouse to Store for restocking
  RETURN // Store to Warehouse for returns
  RELOCATION // Warehouse to Warehouse or Store to Store
  ADJUSTMENT // For inventory adjustments
  INITIAL_STOCK // Initial stocking of a new location
}

enum TransferPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model TransferItem {
  id                String           @id @default(cuid())
  transferId        String
  transfer          Transfer         @relation(fields: [transferId], references: [id])
  productId         String
  product           Product          @relation(fields: [productId], references: [id])
  quantity          Int
  sourceCostPrice   Float // Original cost price
  sourceRetailPrice Float // Original retail price
  targetCostPrice   Float // Adjusted cost price for target location
  targetRetailPrice Float // Adjusted retail price for target location
  condition         ProductCondition @default(NEW)
  adjustmentReason  String? // Reason for price adjustment
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum TransferStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

// Customer Management
model Customer {
  id                  String               @id @default(cuid())
  name                String
  email               String?              @unique
  phone               String?
  address             String?
  loyaltyPoints       Int                  @default(0)
  loyaltyTier         LoyaltyTier          @default(STANDARD)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  sales               Sale[]
  returns             Return[]
  addresses           Address[]
  loyaltyTransactions LoyaltyTransaction[]
}

model Address {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  type       String   @default("SHIPPING")
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LoyaltyProgram {
  id              String               @id @default(cuid())
  name            String
  description     String?
  pointsPerDollar Float                @default(1)
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  tiers           LoyaltyProgramTier[]
  transactions    LoyaltyTransaction[]
}

model LoyaltyProgramTier {
  id               String         @id @default(cuid())
  programId        String
  program          LoyaltyProgram @relation(fields: [programId], references: [id])
  name             String
  description      String?
  requiredPoints   Int
  pointsMultiplier Float          @default(1)
  benefits         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model LoyaltyTransaction {
  id          String                 @id @default(cuid())
  customerId  String
  customer    Customer               @relation(fields: [customerId], references: [id])
  programId   String
  program     LoyaltyProgram         @relation(fields: [programId], references: [id])
  points      Int
  type        LoyaltyTransactionType
  description String?
  referenceId String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

enum LoyaltyTransactionType {
  EARN
  REDEEM
  ADJUSTMENT
  EXPIRY
}

enum LoyaltyTier {
  STANDARD
  SILVER
  GOLD
  PLATINUM
}

// Audit Management
model AuditLog {
  id         String      @id @default(cuid())
  entityType String // e.g., "Product", "Inventory", "Transfer", etc.
  entityId   String // ID of the entity being audited
  action     AuditAction
  userId     String?
  userName   String?
  details    String? // JSON string with details of the changes
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  TRANSFER
  ADJUSTMENT
  SALE
  RETURN
  APPROVAL
  REJECTION
}

// Inventory Audit Models
model Audit {
  id              String            @id @default(cuid())
  referenceNumber String            @unique
  warehouseId     String
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  status          AuditStatus       @default(PLANNED)
  startDate       DateTime
  endDate         DateTime?
  completedDate   DateTime?
  notes           String?
  createdById     String
  createdBy       User              @relation("AuditCreatedBy", fields: [createdById], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  items           AuditItem[]
  assignments     AuditAssignment[]
}

model AuditItem {
  id               String          @id @default(cuid())
  auditId          String
  audit            Audit           @relation(fields: [auditId], references: [id])
  productId        String
  product          Product         @relation(fields: [productId], references: [id])
  inventoryItemId  String
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  expectedQuantity Int
  countedQuantity  Int?
  discrepancy      Int?
  notes            String?
  status           AuditItemStatus @default(PENDING)
  countedById      String?
  countedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model AuditAssignment {
  id            String           @id @default(cuid())
  auditId       String
  audit         Audit            @relation(fields: [auditId], references: [id])
  userId        String
  user          User             @relation(fields: [userId], references: [id])
  assignedZones String? // JSON string of assigned zone IDs
  status        AssignmentStatus @default(PENDING)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum AuditStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AuditItemStatus {
  PENDING
  COUNTED
  RECONCILED
  DISCREPANCY
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProductCondition {
  NEW
  DAMAGED
}

// Tax Management - NEW MODEL
model TaxRate {
  id        String   @id @default(cuid())
  name      String
  rate      Float
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
